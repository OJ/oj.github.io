<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on OJ&#39;s Perspective</title>
    <link>/categories/c#/</link>
    <description>Recent content in C# on OJ&#39;s Perspective</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-au</language>
    <copyright>Copyright OJ Reeves 2019</copyright>
    <lastBuildDate>Wed, 17 Apr 2019 16:55:43 +1000</lastBuildDate>
    
	<atom:link href="/categories/c#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>New Livestream Series</title>
      <link>/posts/new-livestream-series/</link>
      <pubDate>Wed, 17 Apr 2019 16:55:43 +1000</pubDate>
      
      <guid>/posts/new-livestream-series/</guid>
      <description>TL;DR We&amp;rsquo;re going to build a .NET implementation of Meterpreter live on stream. Together. From scratch. Read on for all the details!
The Backstory I remember kicking off my first ever live stream on Twitch back in September 2016. It feels like a lifetime ago already. That stream, broken up into two parts (1, 2), was me breaking open the Capcom.sys driver that had a blatant backdoor in it and abusing this backdoor to get NT AUTHORITY\SYSTEM privileges.</description>
    </item>
    
    <item>
      <title>CorrugatedIron Update - v0.1.1</title>
      <link>/posts/corrugatediron-update-v0.1.1/</link>
      <pubDate>Wed, 03 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/posts/corrugatediron-update-v0.1.1/</guid>
      <description>&lt;p&gt;Last week &lt;a href=&#34;http://facility9.com/&#34; title=&#34;Jeremiah Peschka&#34;&gt;JP&lt;/a&gt; and I released our first Open Source project, &lt;a href=&#34;http://corrugatediron.org/&#34; title=&#34;CorrugatedIron&#34;&gt;CorrugatedIron&lt;/a&gt;. The release seemed to be fairly well received by those people who gave it a spin. We&amp;rsquo;ve had some good feedback along the way which we&amp;rsquo;ll be evaluating, and no doubt those suggestions and comments will be influencing the future of the library.&lt;/p&gt;

&lt;p&gt;In the interim, we wanted to get another version out which sorts out two main issues and that changes the &lt;em&gt;perceived&lt;/em&gt; &amp;ldquo;norm&amp;rdquo; when building applications with CorrugatedIron. Those issues are listed below. We&amp;rsquo;ve also go the first pass of our &lt;a href=&#34;http://corrugatediron.org/documentation/MapReduce.html&#34; title=&#34;Map/Reduce&#34;&gt;Map/Reduce&lt;/a&gt; documentation ready.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not interested in the detail, head on over to the &lt;a href=&#34;http://corrugatediron.org/downloads.html&#34; title=&#34;Downloads page&#34;&gt;download page&lt;/a&gt; to find out the many ways in which you can get access to the release. Otherwise, please read on!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing CorrugatedIron</title>
      <link>/posts/introducing-corrugatediron/</link>
      <pubDate>Mon, 25 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/posts/introducing-corrugatediron/</guid>
      <description>&lt;h2 id=&#34;it-s-alive&#34;&gt;It&amp;rsquo;s Alive!&lt;/h2&gt;

&lt;p&gt;It is with great pride that I introduce my first ever Open Source product release: &lt;a href=&#34;http://corrugatediron.org/&#34; title=&#34;CorrugatedIron&#34;&gt;CorrugatedIron&lt;/a&gt;! A feature-rich .NET client for the &lt;a href=&#34;http://riak.basho.com/&#34; title=&#34;Riak&#34;&gt;Riak&lt;/a&gt; Key-Value store. Together with my partner-in-crime &lt;a href=&#34;http://facility9.com/&#34; title=&#34;Jeremiah Peschka&#34;&gt;Jeremiah&lt;/a&gt;, we&amp;rsquo;ve put together a driver which exposes a great deal of Riak&amp;rsquo;s functionality. CorrugatedIron is at &lt;a href=&#34;https://github.com/DistributedNonsense/CorrugatedIron/tree/v0.1.0&#34;&gt;v0.1.0&lt;/a&gt;, and while it doesn&amp;rsquo;t support every feature the Riak has to offer, it covers most, if not all, of the most common features that are required to effectively communicate with the system.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Quirk in List.Find()</title>
      <link>/posts/a-quirk-in-list.find/</link>
      <pubDate>Wed, 25 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>/posts/a-quirk-in-list.find/</guid>
      <description>&lt;p&gt;Earlier today I was having a chat with a &lt;a href=&#34;http://doomkeeper.com/&#34; title=&#34;Jimmy&#39;s Blog&#34;&gt;friend of mine&lt;/a&gt;, who lives in Vancouver, about finding items that are stored in &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/6sh2ey19.aspx&#34; title=&#34;List(T)&#34;&gt;generic Lists&lt;/a&gt;. He flicked me a code snippet that looked something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;foo&amp;gt; list = new List&amp;lt;foo&amp;gt;();
// .. do some stuff
Foo f = list.Find(delegate(Foo f) { return foo.Name == &amp;quot;Bar&amp;quot;; });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Straight away I fired back with an update to the code which used &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb397687.aspx&#34; title=&#34;Lambda Expressions (C# Programming Guide)&#34;&gt;lambda expressions&lt;/a&gt; instead, as I&amp;rsquo;m a fan of how concise they are ;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Always Question the Source (aka &#34;Don&#39;t Lock on Type Objects&#34;)</title>
      <link>/posts/always-question-the-source-aka-dont-lock-on-type-objects/</link>
      <pubDate>Tue, 10 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>/posts/always-question-the-source-aka-dont-lock-on-type-objects/</guid>
      <description>&lt;p&gt;For one reason or another, I recently found myself perusing some code based on the &lt;a href=&#34;http://www.lhotka.net/cslanet/&#34; title=&#34;CSLA&#34;&gt;CSLA&lt;/a&gt; framework. While nosing around I came upon a snippet of code that I found rather disturbing. An example can be found &lt;a href=&#34;http://www.lhotka.net/cslacvs/viewvc.cgi/trunk/cslacs/Csla/Core/BusinessBase.cs?revision=3690&amp;amp;view=markup&#34; title=&#34;BusinessBase.cs&#34;&gt;here&lt;/a&gt; in the function called InitializeAuthorizationRules.&lt;/p&gt;

&lt;p&gt;For those who are lazy, here is the particular snippet of code that caught my eye:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WPF Shader FX on Codeplex</title>
      <link>/posts/wpf-shader-fx-on-codeplex/</link>
      <pubDate>Tue, 09 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/posts/wpf-shader-fx-on-codeplex/</guid>
      <description>This is just a quick post to point out a new project that has fired up on Codeplex which may be of interest to a few of you graphics and rich client fans.
Joseph Cooney of LearnWPF.com (and WPF MVP to the stars) has kicked off a Codeplex project targetting funky shaders for use with the new features of WPF that were included in SP1. Specifically, it&amp;rsquo;s intended to be a collection of open source/free shaders that can be easily plugged into your WPF apps to make them look schmick (for more info, check this out).</description>
    </item>
    
    <item>
      <title>.NET-fu: Signing an Unsigned Assembly (without Delay Signing)</title>
      <link>/posts/.net-fu-signing-an-unsigned-assembly-without-delay-signing/</link>
      <pubDate>Wed, 09 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>/posts/.net-fu-signing-an-unsigned-assembly-without-delay-signing/</guid>
      <description>&lt;p&gt;This article is also available in &lt;a href=&#34;http://www.otherbit.com/modules/blog/BlogContent.aspx?ID=174&#34; title=&#34;.NET-FU : come trasformare in SIGNED un assembly UNSIGNED (senza ricorrere al DELAY SIGNING)&#34;&gt;Italian&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The code-base that I am currently working with consists of a large set of binaries that are all &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/xc31ft41.aspx&#34; title=&#34;Sign an Assembly with a Strong Name&#34;&gt;signed&lt;/a&gt;. The savvy .NET devs out there will know that any assembly that&amp;rsquo;s used/referenced by a signed assembly must &lt;em&gt;also&lt;/em&gt; be signed.&lt;/p&gt;

&lt;p&gt;This is an issue when dealing with third-party libraries that are not signed. Sometimes you&amp;rsquo;ll be lucky enough to be dealing with vendor that is happy to provide a set of signed assemblies, other times you won&amp;rsquo;t. If your scenario fits the latter (as a recent one did for my colleagues and I), you need to sign the assemblies yourself. Here&amp;rsquo;s how.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Screencast - Setting up Unity Builds</title>
      <link>/posts/screencast-setting-up-unity-builds/</link>
      <pubDate>Thu, 19 Jun 2008 00:00:00 +0000</pubDate>
      
      <guid>/posts/screencast-setting-up-unity-builds/</guid>
      <description>&lt;p&gt;It has taken me a bit longer than expected, but I&amp;rsquo;ve finally got the screencast up!&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s right folks, my angelic voice is now online for you all to experience. 8 minutes of Unity Build glory!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How do you Interact with your ViewState?</title>
      <link>/posts/how-do-you-interact-with-your-viewstate/</link>
      <pubDate>Wed, 21 May 2008 00:00:00 +0000</pubDate>
      
      <guid>/posts/how-do-you-interact-with-your-viewstate/</guid>
      <description>&lt;p&gt;There comes a time in every ASP.NET developer&amp;rsquo;s life when the need arises for information to be persisted into &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms972976.aspx&#34; title=&#34;ViewState&#34;&gt;ViewState&lt;/a&gt;. For the sake of this post I&amp;rsquo;m not really interested in the reasons why. What I am interested in is &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How do you interact with your ViewState?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Magic of Unity Builds</title>
      <link>/posts/the-magic-of-unity-builds/</link>
      <pubDate>Mon, 10 Dec 2007 00:00:00 +0000</pubDate>
      
      <guid>/posts/the-magic-of-unity-builds/</guid>
      <description>&lt;p&gt;I realise that as time goes by, people are using my beloved &lt;a href=&#34;http://en.wikipedia.org/wiki/C++&#34; title=&#34;C++&#34;&gt;C++&lt;/a&gt; less and less. &lt;a href=&#34;http://en.wikipedia.org/wiki/.NET_Framework&#34; title=&#34;.NET Framework&#34;&gt;.NET&lt;/a&gt; (&lt;a href=&#34;http://en.wikipedia.org/wiki/C_Sharp&#34; title=&#34;C#&#34;&gt;C#&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Visual_Basic_.NET&#34; title=&#34;VB.NET&#34;&gt;VB.NET&lt;/a&gt;) and &lt;a href=&#34;http://en.wikipedia.org/wiki/Java_%28programming_language%29&#34; title=&#34;Java&#34;&gt;Java&lt;/a&gt; seem to be taking over the mainstream coding world. Languages such as &lt;a href=&#34;http://en.wikipedia.org/wiki/Ruby_%28programming_language%29&#34; title=&#34;Ruby&#34;&gt;Ruby&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Python_%28programming_language%29&#34; title=&#34;Python&#34;&gt;Python&lt;/a&gt; seem to be taking over the scripting world. For the most part, C and C++ seem to exist only in the gaming/entertainment, real-time and driver worlds.&lt;/p&gt;

&lt;p&gt;In many colleges and univerties C++ is no longer taught as a core subject (along with &lt;a href=&#34;http://en.wikipedia.org/wiki/Assembly_language&#34; title=&#34;Assembly Language&#34;&gt;Assembly language&lt;/a&gt;) which I find quite galling. It&amp;rsquo;s a great language to learn, even if you never use it again. But the purpose of this post is not to preach the virtues and failures of the C++ language, but instead to talk about something that might aid those people who &lt;em&gt;are&lt;/em&gt; using C++.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WTF: Random Memory Contents</title>
      <link>/posts/wtf-random-memory-contents/</link>
      <pubDate>Mon, 03 Sep 2007 00:00:00 +0000</pubDate>
      
      <guid>/posts/wtf-random-memory-contents/</guid>
      <description>If any of you out there are able to give me ONE GOOD REASON why anyone would do something like this, then please let me know. Below are &amp;ldquo;customised&amp;rdquo; realloc() and malloc() I recently stumbled across (yes, they get called. A LOT):
void *mcRealloc( void *P, int SIZE ) { int oldSize = _msize( P ); P = realloc( P, SIZE ); if ( P ) { for ( int i = oldSize; i &amp;lt; SIZE; i++ ) { ((char *) P)[i] = (char) rand(); } } return P; } void *mcMalloc( int SIZE ) { void *P; P = malloc( SIZE ); if ( P ) { for ( int i = 0; i &amp;lt; SIZE; i++ ) { ((char *) P)[i] = (char) rand(); } } return P; }  Is it just me, or is this a huge WTF?</description>
    </item>
    
    <item>
      <title>Safer Code through Object-Orientation</title>
      <link>/posts/safer-code-through-object-orientation/</link>
      <pubDate>Thu, 09 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/posts/safer-code-through-object-orientation/</guid>
      <description>&lt;p&gt;In my current position I spend a lot of time battling against a fairly poorly-written C++ code base. The code, while &lt;em&gt;technically&lt;/em&gt; written in C++, is actually more of a C-like &amp;ldquo;splat&amp;rdquo; with a few classes thrown in. Since I began working on this project I&amp;rsquo;ve seen many cases where proper &lt;a href=&#34;http://en.wikipedia.org/wiki/Object-oriented_programming&#34; title=&#34;Object-oriented programming&#34;&gt;object-orientation&lt;/a&gt; would have made a drastic improvement to the quality of the code.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s these cases which are the inspiration for this blog post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating Concrete Objects</title>
      <link>/posts/creating-concrete-objects/</link>
      <pubDate>Sat, 14 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>/posts/creating-concrete-objects/</guid>
      <description>&lt;p&gt;Being a fan of &lt;a href=&#34;http://en.wikipedia.org/wiki/Object-oriented_programming&#34; title=&#34;Object-oriented Programming&#34;&gt;OOP&lt;/a&gt;, I tend to write a lot of object-oriented code. Coming up with a meaningful object model that behaves in an appropriate way is just as important as having a meaningful interface to your objects. A concrete object is an object that actually behaves in the manner you&amp;rsquo;d expect without any wierd side-effects, and has the same kind of attributes that you&amp;rsquo;d expect of a primitive data type.&lt;/p&gt;

&lt;p&gt;Creating concrete data objects/classes is a good thing to do, as it reduces the probability of bugs, and crazy side-effects. It&amp;rsquo;s also an important first step in writing intuitive code - which will be the topic of a later blog post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Extended-Precision Floating-Point Values in the CLR</title>
      <link>/posts/extended-precision-floating-point-values-in-the-clr/</link>
      <pubDate>Wed, 27 Jun 2007 00:00:00 +0000</pubDate>
      
      <guid>/posts/extended-precision-floating-point-values-in-the-clr/</guid>
      <description>&lt;p&gt;While at work today I hit a problem that I&amp;rsquo;ve never hit before (which is quite rare these days :) ), and while it was frustrating it was also good to learn about something that I never knew was a problem. If you&amp;rsquo;re having some issues marshalling double-precision floating-point information through managed components to unmanaged components, or you&amp;rsquo;re just interested in learning something new, then read on :)&lt;/p&gt;

&lt;p&gt;Let me start by explaining the scenario:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Reversing Tutorial</title>
      <link>/posts/a-reversing-tutorial/</link>
      <pubDate>Sat, 03 Mar 2007 00:00:00 +0000</pubDate>
      
      <guid>/posts/a-reversing-tutorial/</guid>
      <description>For a long time I&amp;rsquo;ve been interested in the lovely and exciting art of Reverse Code Engineering (RCE) and on more than one occasion I&amp;rsquo;ve been sucked in to spending hours and hours delving through pages of ASM code searching for the answer.
Today is no different. With Amy feeling pretty crook due to a nasty headache, I thought I&amp;rsquo;d retire to my PC and do something quiet that I haven&amp;rsquo;t done for ages.</description>
    </item>
    
    <item>
      <title>.NET System::String to ANSI char*</title>
      <link>/posts/.net-systemstring-to-ansi-char/</link>
      <pubDate>Fri, 02 Mar 2007 00:00:00 +0000</pubDate>
      
      <guid>/posts/.net-systemstring-to-ansi-char/</guid>
      <description>Hi All,
I&amp;rsquo;ve been doing a bit of work of late dealing with interops between managed and unmanaged code, and I have nailed a little snippet which shows how convert between a managed .NET String object and a stanard ANSI/C-style string. Check out the following code if you need to do the same:
System::String managedString = WHATEVER; System::IntPtr stringPtr = System::Runtime::InteropServices::Marshal::StringToHGlobalAnsi( myString ); char* unmanagedString = static_cast&amp;lt; char* &amp;gt;( stringPtr.ToPointer() ); // do whatever you want with the unmanaged string .</description>
    </item>
    
  </channel>
</rss>